type Account @entity {
  id: ID!
  accountId: BigInt!
  address: String!
  recoveryAddress: String!

  ownedNodes: [Node!]! @derivedFrom(field: "owner")

  createdAtTimestamp: Int!
}

enum NodeType {
  UNKNOWN
  METALABEL
  SQUAD
  RELEASE
  DROP
  TREASURY
  SPLIT
}

type Node @entity {
  id: ID!
  nodeId: BigInt!
  nodeType: NodeType!
  metadata: String!
  owner: Account
  parent: Node
  accessNode: Node

  catalogs: [Catalog!]! @derivedFrom(field: "controlNode")

  children: [Node!]! @derivedFrom(field: "parent")
  accessChildren: [Node!]! @derivedFrom(field: "accessNode")
  authorizedNodeManagers: [AuthorizedNodeManager!]! @derivedFrom(field: "node")

  createdAtTimestamp: Int!
}

type AuthorizedNodeManager @entity {
  id: ID!
  node: Node!
  address:  String!

  createdAtTimestamp: Int!
}

type Catalog @entity {
  id: ID!
  address: String!
  name: String!
  symbol: String!
  ownerAddress: String!
  controlNode: Node!

  createdAtTimestamp: Int!

  records: [Record!]! @derivedFrom(field: "catalog")
  sequences: [Sequence!]! @derivedFrom(field: "catalog")
}

type Record @entity {
  id: ID!
  tokenId: BigInt!
  sequence: Sequence!
  etching: String!
  ownerAddress: String!
  data: BigInt!

  catalog: Catalog! # denormalized, sequence -> catalog
  dropNode: Node! # denormalized, sequence -> dropNode

  createdAtTimestamp: Int!
}

type Sequence @entity {
  id: ID!
  catalog: Catalog!
  sequenceId: Int!
  dropNode: Node!
  engineAddress: String!

  createdAtTimestamp: Int!

  records: [Record!]! @derivedFrom(field: "sequence")
}
