type Account @entity {
  id: ID!
  accountId: BigInt!
  address: String!
  metadata: String!

  ownedNodes: [Node!]! @derivedFrom(field: "owner")

  createdAtTimestamp: BigInt!
  createdAtTransaction: Bytes!
}

type AuthorizedAccountIssuer @entity {
  id: ID!
  address: String!

  createdAtTimestamp: BigInt!
  createdAtTransaction: Bytes!
}

enum NodeType {
  UNKNOWN
  METALABEL
  RELEASE
}

type Node @entity {
  id: ID!
  nodeId: BigInt!
  nodeType: NodeType!
  metadata: String!
  owner: Account
  parent: Node
  groupNode: Node
  reservedSubdomain: String # null if not reserved yet

  collections: [Collection!]! @derivedFrom(field: "controlNode")
  membershipsCollections: [MembershipsCollection!]! @derivedFrom(field: "controlNode")
  children: [Node!]! @derivedFrom(field: "parent")
  groupChildren: [Node!]! @derivedFrom(field: "groupNode")
  controllers: [NodeController!]! @derivedFrom(field: "node")
  sequences: [Sequence!]! @derivedFrom(field: "dropNode")
  records: [Record!]! @derivedFrom(field: "dropNode")
  revenueModules: [RevenueModule!]! @derivedFrom(field: "controlNode")
  recordCollectors: [RecordCollector!]! @derivedFrom(field: "dropNode")

  collectionCount: Int!
  membershipsCollectionCount: Int!
  childrenCount: Int!
  groupChildrenCount: Int!
  controllerCount: Int!
  sequenceCount: Int!
  recordCount: Int!
  revenueModuleCount: Int!

  createdAtTimestamp: BigInt!
  createdAtTransaction: Bytes!
}

type NodeController @entity {
  id: ID!
  node: Node!
  address:  String!

  createdAtTimestamp: BigInt!
  createdAtTransaction: Bytes!
}


type Collection @entity {
  id: ID!
  address: String!
  name: String!
  symbol: String!
  ownerAddress: String!
  controlNode: Node!

  createdAtTimestamp: BigInt!
  createdAtTransaction: Bytes!

  recordCount: Int!
  sequenceCount: Int!

  records: [Record!]! @derivedFrom(field: "collection")
  sequences: [Sequence!]! @derivedFrom(field: "collection")
  recordCollectors: [RecordCollector!]! @derivedFrom(field: "collection")
}

type Record @entity {
  id: ID!
  tokenId: BigInt!
  sequence: Sequence!
  ownerAddress: String!
  recordCollector: RecordCollector!
  data: BigInt!

  collection: Collection! # denormalized, sequence -> ccollection
  dropNode: Node! # denormalized, sequence -> dropNode

  createdAtTimestamp: BigInt!
  createdAtTransaction: Bytes!
}

type RecordCollector @entity {
  id: ID!
  ownerAddress: String!

  collection: Collection! # denormalized, sequence -> collection
  dropNode: Node! # denormalized, sequence -> dropNode
  sequence: Sequence!

  recordCount: Int!

  records: [Record!]! @derivedFrom(field: "recordCollector")

  createdAtTimestamp: BigInt!
}

type Sequence @entity {
  id: ID!
  collection: Collection!
  sequenceId: Int!
  dropNode: Node!
  engineAddress: String!
  maxSupply: BigInt # null if none
  sealedBeforeTimestamp: BigInt!
  sealedAfterTimestamp: BigInt!
  engineData: String!

  createdAtTimestamp: BigInt!
  createdAtTransaction: Bytes!

  recordCount: Int!

  # only present for drop engine V2 sequences
  price: BigInt # in wei
  royaltyBps: Int
  revenueRecipient: String
  allowContractMints: Boolean
  randomizeMetadataVariants: Boolean
  maxRecordsPerTransaction: Int
  primarySaleFeeBps: Int
  priceDecayPerDay: BigInt # in wei
  decayStopTimestamp: BigInt

  records: [Record!]! @derivedFrom(field: "sequence")
  recordCollectors: [RecordCollector!]! @derivedFrom(field: "sequence")
}

type MembershipsCollection @entity {
  id: ID!
  address: String!
  name: String!
  symbol: String!
  ownerAddress: String!
  controlNode: Node!

  createdAtTimestamp: BigInt!
  createdAtTransaction: Bytes!

  membershipNFTCount: Int!

  membershipNFTs: [MembershipNFT!]! @derivedFrom(field: "membershipsCollection")
}

type MembershipNFT @entity {
  id: ID!
  tokenId: BigInt!
  ownerAddress: String!

  membershipsCollection: MembershipsCollection!
  controlNode: Node! # denormalized, memberships collection -> controlNode

  createdAtTimestamp: BigInt!
  createdAtTransaction: Bytes!
}

type RevenueModule @entity {
  id: ID!
  metadata: String!
  controlNode: Node!
  address: String!

  waterfallAddress: String
  waterfallRecipientAddresses: [String!] # all recipients, including residual address
  waterfallRecipientThresholds: [BigInt!] # has length 1 less than recipient array

  splitAddress: String
  splitRecipientAddresses: [String!] # parallel array w below
  splitRecipientAllocations: [Int!] # raw values from 0xsplit, 1e6 = 100%

  createdAtTimestamp: BigInt!
  createdAtTransaction: Bytes!
}
