type Account @entity {
  id: ID!
  address: String!

  adminForMetalabels: [Metalabel!]! @derivedFrom(field: "admin")
  ownedMemberships: [Membership!]! @derivedFrom(field: "owner")
  ownedRecords: [Record!]! @derivedFrom(field: "owner")
}

type Directory @entity {
  id: ID!
  collectionAddress: String!

  metalabels: [Metalabel!]! @derivedFrom(field: "directory")
}

type Metalabel @entity {
  id: ID!
  tokenId: Int!
  admin: Account!
  directory: Directory!
  metadataUri: String!

  groups: [Metalabel!]! @derivedFrom(name: "metalabel")
  memberships: [Membership!]! @derivedFrom(name: "metalabel")
  releases: [Release!]! @derivedFrom(name: "metalabel")
  catalogs: [Catalog!]! @derivedFrom(name: "metalabel")
  drops: [Drop!]! @derivedFrom(name: "metalabel")
  records: [Record!]! @derivedFrom(name: "metalabel")
}

type Group @entity {
  id: ID!
  collectionAddress: String!
  metalabel: Metalabel!
  permissionsMask: BigInt!

  memberships: [Membership!]! @derivedFrom(name: "group")
}

type Membership @entity {
  id: ID!
  tokenId: Int!
  owner: Account!
  group: Group!

  metalabel: Metalabel! # denormalized: group -> metalabel
}

type Release @entity {
  id: ID!
  metalabel: Metalabel!
  metadataUri: String!

  drops: [Drop!]! @derivedFrom(name: "release")
  records: [Record!]! @derivedFrom(name: "release")
}

type Catalog @entity {
  id: ID!
  collectionAddress: String!
  metalabel: Metalabel!

  drops: [Drop!]! @derivedFrom(name: "catalog")
  records: [Record!]! @derivedFrom(name: "catalog")
}

type Drop @entity {
  id: ID!
  release: Release!
  mintDestination: Catalog!

  metalabel: Metalabel! # denormalized: release -> metalabel

  records: [Record!]! @derivedFrom(name: "drop")
}

type Record @entity {
  id: ID!
  tokenId: Int!
  drop: Drop!
  metadataUri: String!
  owner: Account!

  release: Release! # denormalized: drop -> release
  metalabel: Metalabel! # dernomalized: drop -> release -> metalabel
  catalog: Catalog! # denormalized: drop -> catalog
}


